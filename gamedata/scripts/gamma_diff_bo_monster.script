local FX_Play 		= gamma_diff_utils.FX_Play
local get_Barrel 	= gamma_diff_utils.get_Barrel
local play_sound	= gamma_diff_utils.play_sound
ini_monster 		= ini_file_ex("plugins\\gamma_monsters.ltx")
ini_particles		= ini_file_ex("plugins\\gamma_particles.ltx")
local max			= math.max
local min 			= math.min
local clamp			= _g.clamp

function tn(number)
	return tonumber(string.format("%.3f", number))
end

local function load_defaults()
	local t = {}
	local op = gamma_diff_mcm.op
	for i, v in ipairs(op.gr) do
		if v.def ~= nil then
			t[v.id] = v.def
		end
	end
	return t
end

local settings = load_defaults()

local function load_settings()
	settings = load_defaults()
	if ui_mcm then
		for k, v in pairs(settings) do
			settings[k] = ui_mcm.get("gamma_diff/" .. k)
		end
	end
end

local function trace(str, ...)
	if settings.debug == 2 then
		printf("[G.A.M.M.A. THE THING] MONSTERS: " .. str, ...)
	end
end

local function combat_log(str, ...)
	if settings.debug == 1 then
		printf("" .. str, ...)
	end
end

function monster_on_before_hit(monster,shit,bone_id)

	if shit.draftsman:id() ~= db.actor:id() then return end
	if not monster then return end
	if bone_id == 65535 then return end
	if not monster:alive() then return end
	
	local shooter = shit.draftsman
	wpn = level.object_by_id(shit.weapon_id)
	
	if wpn == nil then return end
	if not IsWeapon(wpn) then return end
	
	sec = wpn:section()
	
	cqc_mult 			= 1.0
	mutant_mult			= 0.25
	ammo_mult			= 1.0
	ammo_scale			= 0.85
	spec_monster_mult	= 1.00
	bone_mult			= 1.00
	
	trace('%s about to be hit by %s in bone %s for %s damage', monster and monster:name(), shit and shit.draftsman and shit.draftsman:name(), bone_id, shit.power)
	
	if (string.match(sec, "knife")) then
		cqc_mult = 3.0
	end
	
	if (string.match(sec, "axe")) then
		cqc_mult = 1.5
	end

	local wpn_id 			= wpn:id()
	local ammo_type_number 	= wpn:get_ammo_type()
	local ammo_list 		= utils_item.get_ammo(sec, wpn_id)
	local ammo_section 		= ammo_list[ammo_type_number+1]
	local wpn_hit_power 	= ui_wpn_params.read_float(sec, "", "hit_power") or 1.0
	
	local k_ap 				= ini_sys:r_float_ex(ammo_section, "k_ap") or 0.05
	local k_hit 			= ini_sys:r_float_ex(ammo_section, "k_hit") or 1
	local air_res 			= ini_sys:r_float_ex(ammo_section, "k_air_resistance") or 0.05
	local wm_size 			= ini_sys:r_float_ex(ammo_section, "wm_size") or 0.05

	local monster_pos 		= monster:position()
	local shooter_pos 		= shooter:position()
	local dist 				= monster_pos:distance_to(shooter_pos)
	
	ammo_section = string.gsub(ammo_section, "ammo_", "")
	ammo_section = string.gsub(ammo_section, "_bad", "")
	ammo_section = string.gsub(ammo_section, "_verybad", "")
	
	local barrel_condition_corrected = get_Barrel(wpn)
	
	-- Parse ini_monster
	local who = nil
	local can_crit = {}
	local crit_bones = nil
	local crit_table = {}
	
	if ini_monster:section_exist("gbo_" .. monster:section()) then
		who = "gbo_" .. monster:section()
	else
		who = "gbo_monster_base"
	end
	
	can_crit = ini_monster:r_string_ex(who, "crit_spots")
	if can_crit ~= nil then
		crit_bones = str_explode(can_crit, ",")
		for i = 1, #crit_bones do
			crit_table[#crit_table + 1] = crit_bones[i]
		end
	
		if #crit_table > 0 then
			can_crit = true
		else
			can_crit = false
		end
	else
		trace("Monster [" .. who .. "] doesn't have critical spots defined!")
		can_crit = false
	end
	
	crit = 0
	for a = 1, #crit_table do
		if string.find(crit_table[a], bone_id) then
			bone_mult = tonumber(ini_monster:r_string_ex(who, "crit_mul"))
			trace('Critical hit @ [%s]! >> bone_mult: %s', bone_id, bone_mult)
			crit = 1
			break
		end
	end
	
	if ini_monster:line_exist(who, ammo_section) then
		ammo_mult = tonumber(ini_monster:r_string_ex(who, ammo_section)) or 1
		ammo_mult = ammo_mult * ammo_scale
		trace('Ammo has a multiplier defined in [%s] >> ammo_mult: %s', who, ammo_mult)
	end
	
	spec_monster_mult = tonumber(ini_monster:r_string_ex(who, "armor")) or 1
	if spec_monster_mult ~= 1 then
		trace('Monster has damage multiplier defined in [%s], >> armor: %s', who, spec_monster_mult)
	end

	-- Process monster ltx
	immunities_sec = ini_sys:r_string_ex(monster:section(), "immunities_sect") or nil
	protection_sec = ini_sys:r_string_ex(monster:section(), "protections_sect") or nil

	imm = 1
	if immunities_sec then
			if shit.type == hit.burn or shit.type == hit.light_burn then imm = ini_sys:r_float_ex(immunities_sec, "burn_immunity") 				or 1
		elseif shit.type == hit.shock 								then imm = ini_sys:r_float_ex(immunities_sec, "shock_immunity")				or 1
		elseif shit.type == hit.chemical_burn 						then imm = ini_sys:r_float_ex(immunities_sec, "chemical_burn_immunity") 	or 1
		elseif shit.type == hit.radiation							then imm = ini_sys:r_float_ex(immunities_sec, "radiation_immunity")			or 1
		elseif shit.type == hit.telepatic							then imm = ini_sys:r_float_ex(immunities_sec, "telepatic_immunity")			or 1
		elseif shit.type == hit.wound or shit.type == hit.wound_2	then imm = ini_sys:r_float_ex(immunities_sec, "wound_immunity")				or 1
		elseif shit.type == hit.fire_wound							then imm = ini_sys:r_float_ex(immunities_sec, "fire_wound_immunity")		or 1
		elseif shit.type == hit.strike								then imm = ini_sys:r_float_ex(immunities_sec, "strike_immunity")			or 1
		elseif shit.type == hit.explosion							then imm = ini_sys:r_float_ex(immunities_sec, "explosion_immunity")			or 1 end
	end

	if imm ~= 1 then
		trace('Monster immunity against damage type %s >> %s', shit.type, imm)
	end

	skin_armor = 0
	hit_fraction = 0
	monster_bone_value = 0
	if protection_sec then
		skin_armor = ini_sys:r_float_ex(protection_sec, "skin_armor") or 0
		monster_bone_value = ini_sys:r_float_ex(protection_sec, "hit_fraction_monster") or 1
	end

	no_pen = 1
	if k_ap > monster_bone_value and monster_bone_value > 0 then
		skin_armor = skin_armor * 0.2 + (( (1 - monster_bone_value) * 0.75 ) * 1.3)
		trace('Overpenetration! >> AP: %s - Monster BR: %s // Damage reduction: %s', tn(k_ap), tn(monster_bone_value), tn(skin_armor))
		no_pen = 0
	else
		trace('No Overpen >> AP: %s - Monster BR: %s // Damage reduction: %s', tn(k_ap), tn(monster_bone_value), tn(skin_armor))
	end

	imm = max(imm, 0.1)
	skin_armor = clamp(skin_armor, -1.0, 0.99)

	shit.power = wpn_hit_power / ( 1 + dist / 200 * ( air_res * 0.5 / ( 1 - air_res + 0.1 ))) * k_hit * mutant_mult * ammo_mult * spec_monster_mult * bone_mult * cqc_mult * barrel_condition_corrected

	shit.power = shit.power * imm
	shit.power = shit.power * (1 - skin_armor)

	if no_pen == 1 then
		FX_Play("pfx_flesh", monster, shit, monster:bone_name(bone_id))
	end
	
	perk_based_artefacts.last_npc_hit = hit(shit)
	perk_based_artefacts.last_npc_hit_bone_index = bone_id    
	
	local pbadamage = hit(shit)
	perk_based_artefacts.process_artefacts(perk_based_artefacts.artefact_on_monster_before_hit_functions, monster, pbadamage, bone_id)
	
	shit.power = pbadamage.power
	life_remove = shit.power
	
	local gib_threshold = -0.5
	if string.find(ammo_section, "buck") or string.find(ammo_section, "shrapnel") then
		gib_threshold = gib_threshold / 4
	end
	if string.find(ammo_section, "gauss") then
		gib_threshold = 0.0
	end

	monster:set_health_ex(monster.health - life_remove)

	if monster.health < 0 then
		monster.health = 0
	end
	
	-- LUDICROUS GIBS
	if monster.health <= 0 and (monster.health - life_remove) <= gib_threshold then
		if settings.gibs ~= 0 and math.random(1, 10) >= 4 then
			FX_Play("pfx_gibs", monster, shit, bone_id)
			play_sound("gore\\hit_zombie_"..math.random(23), 1.0, monster)
		end
		shit.bone = "bip01_spine"
	end
	
	trace("Final damage: [" .. life_remove .. "]")
	
	if crit == 1 then
		combat_log('%s || Struck %s (%s) with %s (%s) as a critical hit (x%s) for %s damage.', time_global(), monster:section(), monster:id(), sec, ammo_section, bone_mult, life_remove)
	else
		combat_log('%s || Struck %s (%s) with %s (%s) for %s damage.', time_global(), monster:section(), monster:id(), sec, ammo_section, life_remove)
	end
	
	shit.power = 0.0001
	life_remove = nil
	
	return
end

function on_game_start()
	RegisterScriptCallback("monster_on_before_hit", monster_on_before_hit)
	RegisterScriptCallback("actor_on_first_update", load_settings)
	RegisterScriptCallback("on_option_change", load_settings)
end
