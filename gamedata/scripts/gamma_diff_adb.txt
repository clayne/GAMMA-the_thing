local get_outfit_ap_res = grok_actor_damage_balancer.get_outfit_ap_res
local get_outfit_immunity = grok_actor_damage_balancer.get_outfit_immunity
local psy = gamma_diff_adb_psy
local clamp = _g.clamp
local wepl = wepl_hit_effect.actor_on_before_hit

function wepl_hit_effect.actor_on_before_hit(shit, bone_id, flags)
end

local health_gating_flag = false
local health_gating_active = false
local health_gating_time = 2000
local health_gating_tg = 0

local lockout_fpunch = 250
local lockout_burner = 300

-- These lockout values are FPS values at 120Hz
local lockout_strike_self 	= 5	-- 5 frames of invulnerability
local lockout_bullet		= 1
local lockout_mine_chem		= 12
local lockout_mine_fire		= 10

local function load_defaults()
	local t = {}
	local op = gamma_diff_mcm.op
	for i, v in ipairs(op.gr) do
		if v.def ~= nil then
			t[v.id] = v.def
		end
	end
	return t
end

local settings = load_defaults()

local function load_settings()
	settings = load_defaults()
	if ui_mcm then
		for k, v in pairs(settings) do
			settings[k] = ui_mcm.get("gamma_diff/" .. k)
		end
	end
end

local function trace(str, ...)
	if settings.debug then
		printf("[G.A.M.M.A. THE THING] ADB: " .. str, ...)
	end
end

function keep_alive()
	if time_global() - health_gating_tg > 1500 then
		health_gating_flag = false
		health_gating_active = false
		UnregisterScriptCallback("actor_on_update", keep_alive)
	end
end

local zone_last = {}
local hit_last = {}

local vanilla_diff = 
{
	[1] = "gd_novice",
	[2] = "gd_stalker",
	[3] = "gd_veteran",
	[4] = "gd_master",
}

local difficulty_multiplier = 
{
	[1]  = 0.65,
	[2]  = 0.8,
	[3]  = 1.0,
	[4]  = 1.2,
}

-- Lists of engine pointers
local SCANNED_SLOTS = 
{
	[1] = true,         --knife
	[2] = true,	        --wpn 1
	[3] = true,	        --wpn 2
	[4] = true,	        --grenades
	[5] = true,	        --binoculars
	[6] = true,	        --bolt
	[7] = true,	        --outfit
	[8] = true,	        --PDA
	[9] = true,	        --detector
	[10] = true,        --torch
	[11] = true,        --artefact
	[12] = true,        --helmet
	[13] = true,        --backpack
	--[14] = true,		--script animation
}

local hitboxes={}
	hitboxes[19]	=	"head"
	hitboxes[17]	=	"head"
	hitboxes[16]	=	"head"
	hitboxes[15]	=	"head"
	hitboxes[14]	=	"head"
	hitboxes[13]	=	"torso"
	hitboxes[12]	=	"torso"
	hitboxes[11]	=	"torso"
	hitboxes[2]		=	"torso"
	hitboxes[20]	=	"leftarm"
	hitboxes[21]	=	"leftarm"
	hitboxes[22]	=	"leftarm"
	hitboxes[23]	=	"leftarm"
	hitboxes[33]	=	"rightarm"
	hitboxes[34]	=	"rightarm"
	hitboxes[35]	=	"rightarm"
	hitboxes[36]	=	"rightarm"
	hitboxes[3]		=	"leftleg"
	hitboxes[4]		=	"leftleg"
	hitboxes[7]		=	"rightleg"
	hitboxes[8]		=	"rightleg"

local hitbox_mult = 
{
	["head"] 		= 0.8,
	["torso"] 		= 0.9,
	["leftarm"] 	= 0.85,
	["rightarm"] 	= 0.85,
	["leftleg"] 	= 0.85,
	["rightleg"] 	= 0.85,
}

local dtype = 
{
	[hit.light_burn]    = "light_burn",
	[hit.burn]          = "burn",
	[hit.strike]        = "strike",
	[hit.shock]         = "shock",
	[hit.wound]         = "wound",
	[hit.radiation]     = "radiation",
	[hit.telepatic]     = "telepatic",
	[hit.chemical_burn] = "chemical_burn",
	[hit.explosion]     = "explosion",
	[hit.fire_wound]    = "fire_wound",
}

-- Immunities names
--		burn_immunity			= 1.0
--		strike_immunity			= 1.0
--		shock_immunity			= 1.0
--		wound_immunity			= 1.0
--		wound_2_immunity		= 1.0
--		radiation_immunity		= 1.0
--		telepatic_immunity		= 1.0
--		chemical_burn_immunity	= 1.0
--		explosion_immunity		= 1.0
--		fire_wound_immunity		= 1.0


-- Protections names
--		burn_protection               = 0.04
--		shock_protection              = 0.25
--		radiation_protection          = 0
--		chemical_burn_protection      = 0.02
--		telepatic_protection          = 0
--		strike_protection             = 0.006
--		explosion_protection          = 0.25
--		wound_protection              = 0.35
--		fire_wound_protection         = 0.25

local HitTypeID = 
{
	["Burn"]         = 0 ,
	["Shock"]        = 1 ,
	["ChemicalBurn"] = 2 ,
	["Radiation"]    = 3 ,
	["Telepatic"]    = 4 ,
	["Wound"]        = 5 ,
	["FireWound"]    = 6 ,
	["Strike"]       = 7 ,
	["Explosion"]    = 8 ,
	["Wound_2"]      = 9 ,
	["LightBurn"]    = 10,
}

local BoosterID = 
{
	["HpRestore"]              = 0,
	["PowerRestore"]           = 1,
	["RadiationRestore"]       = 2,
	["BleedingRestore"]        = 3,
	["MaxWeight"]              = 4,
	["RadiationProtection"]    = 5,
	["TelepaticProtection"]    = 6,
	["ChemicalBurnProtection"] = 7,
	["BurnImmunity"]           = 8,
	["ShockImmunity"]          = 9,
	["RadiationImmunity"]      = 10,
	["TelepaticImmunity"]      = 11,
	["ChemicalBurnImmunity"]   = 12,
	["ExplImmunity"]           = 13,
	["StrikeImmunity"]         = 14,
	["FireWoundImmunity"]      = 15,
	["WoundImmunity"]          = 16,
	["MaxCount"]               = 17,
}

function get_game_factor(key)
	trace("Gameplay difficulty factor requested: [" .. key .. "] = " .. tostring(factors_game[key]))
	return factors_game[key]
end

function table_stuff_up(shit)
	get_stats(shit.type)
end

function get_stats(type, which)

	if (type == 0) or (type == 10) then
		hit_type			= HitTypeID["Burn"]
		immunity			= "burn_immunity"
		protection			= "Burn"
		booster_type_def	= 8
		adjuster			= 0.5
		limiter				= 0.95
		absorbe				= 0.85
		bleed				= 0.0
		scale				= 1.5
		arti				= 1.0
	end
	
	if type == 1 then
		hit_type			= HitTypeID["Shock"]
		immunity			= "shock_immunity"
		protection			= "Shock"
		booster_type_def	= 9
		adjuster			= 0.1
		limiter				= 0.85
		absorbe				= 0.0
		bleed				= 0.0
		scale				= 2.5
		arti				= 1.0
	end
	
	if type == 2 then
		hit_type			= HitTypeID["ChemicalBurn"]
		immunity			= "chemical_burn_immunity"
		protection			= "ChemicalBurn"
		booster_type_def	= 12
		adjuster			= 1.0
		limiter				= 0.85
		absorbe				= 1.0
		bleed				= 0.15
		scale				= 3.0
		arti				= 1.0
	end
	
	if type == 3 then
		hit_type			= HitTypeID["Radiation"]
		immunity			= "radiation_immunity"
		protection			= "Radiation"
		booster_type_def	= 5
		adjuster			= 9.0
		limiter				= 0.99
		absorbe				= 0.0
		bleed				= 0.0
		scale				= 0.1
		arti				= 1.0
	end
	
	if type == 4 then
		hit_type			= HitTypeID["Telepatic"]
		immunity			= "telepatic_immunity"
		protection			= "Telepatic"
		booster_type_def	= 11
		adjuster			= 0.8
		limiter				= 0.975
		absorbe				= 0.0
		bleed				= 0.0
		scale				= 1.0
		arti				= 0.6
	end
	
	if (type == 5) or (type == 9) then
		hit_type 			= HitTypeID["Wound"]
		immunity 			= "wound_immunity"
		protection 			= "Wound"
		booster_type_def 	= 16
		adjuster 			= 0.75
		limiter 			= 0.95
		absorbe				= -0.05
		bleed				= 1.0
		scale				= 0.55
		arti				= 1.0
	end
	
	if type == 6 then
		hit_type 			= HitTypeID["FireWound"]	-- Fancy UpperCase name.
		immunity 			= "fire_wound_immunity"		-- Armor's RESISTANCE to wear against this damage type.
		protection 			= "FireWound"				-- Armor's PROTECTION against this damage type.
		booster_type_def 	= 15						-- Booster ID
		adjuster 			= 0.75						-- Protection multiplier.
		limiter 			= 0.90						-- Protection upper cap.
		absorbe				= 0.0						-- Condition damage to armor. >> degrade = ((damage x (0.07 x (1.0 + [absorbe]))) / (1.0 - [immunity])) * [0.65, 0.8, 1.0, 1.2 (DIFFICULTY)]
		bleed				= 1.0						-- Bleed multiplier.
		scale				= 0.8						-- Raw multiplier.
		arti				= 1.0						-- Artefacts' PROTECTION multiplier.
	end
	
	if type == 7 then
		hit_type			= HitTypeID["Strike"]
		immunity			= "strike_immunity"
		protection			= "Strike"
		booster_type_def	= 14
		adjuster			= 1.5
		limiter				= 0.80
		absorbe				= 0.0
		bleed				= 0.1
		scale				= 0.5
		arti				= 1.0
	end
	
	if type == 8 then
		hit_type			= HitTypeID["Explosion"]
		immunity			= "explosion_immunity"
		protection			= "Explosion"
		booster_type_def	= 13
		adjuster			= 1.5
		limiter				= 0.85
		absorbe				= 1.5
		bleed				= 0.5
		scale				= 1.0
		arti				= 1.0
	end
	
	if which and (which > 0 and which < 10) then
		if		which == 1 then
			return hit_type
		elseif	which == 2 then
			return immunity
		elseif	which == 3 then
			return protection
		elseif	which == 4 then
			return booster_type_def
		elseif	which == 5 then
			return adjuster
		elseif	which == 6 then
			return limiter
		elseif	which == 7 then
			return absorbe
		elseif	which == 8 then
			return bleed
		elseif	which == 9 then
			return scale
		else
			return arti
		end
	end
end

function get_protection(shit, bone_id, k_ap)
	
	table_stuff_up(shit)
	
	--printf('- who: %s (%s)', shit.draftsman:name(), shit.draftsman:id())
	
	total_prot = 0
	local actor = db.actor
	
	headshot = 0
	if hitboxes[bone_id] == "head" then
		headshot = 1
	end
	
	legs = 0
	arms = 0
	if (hitboxes[bone_id] == "leftleg") or (hitboxes[bone_id] == "rightleg") then
		legs = 1
	end
	if (hitboxes[bone_id] == "leftarm") or (hitboxes[bone_id] == "rightarm") then
		arms = 1
	end
	
	elem = 0
	
	if shit.type ~= hit.fire_wound then
		headshot = 0
		legs = 0
		arms = 0
		elem = 1
	end
	
	bonus_durability = 0
	
	local armor_protection = 0
	local armor_bone_value = 0
	local outfit = db.actor:item_in_slot(7)
	if (outfit) then
		local cond = outfit:condition()
		local c_outfit = outfit:cast_CustomOutfit()
		if (c_outfit) then
			
			bonus_durability = get_outfit_immunity(outfit, immunity)
		
			if shit.type == hit.fire_wound then
				armor_protection = c_outfit:GetBoneArmor( BoneID["bip01_spine"] ) * cond * adjuster or 0
			else
				armor_protection = c_outfit:GetDefHitTypeProtection(hit_type) * cond * adjuster or 0
			end
			
			if settings.vulnerable and legs == 1 then
				armor_protection = armor_protection * 0.85
			end
			if settings.vulnerable and arms == 1 then
				armor_protection = armor_protection * 0.95
			end
			
			armor_hit_frac = ini_sys:r_float_ex(outfit:section(), "hit_fraction_actor") or 1
			armor_bone_value = (1 - armor_hit_frac) * cond * 0.75 or 0
		end
	end

	local helmet_protection = 0
	local helmet_bone_value = 0
   	local helmet = db.actor:item_in_slot(12)
    	if (helmet) then
		local cond = helmet:condition()
		local c_helmet = helmet:cast_Helmet()
		if (c_helmet) then    
			
			bonus_durability = get_outfit_immunity(helmet, immunity)
			
			if shit.type == hit.fire_wound then
				helmet_protection = c_helmet:GetBoneArmor( BoneID["bip01_head"] ) * cond * adjuster or 0
			else
				helmet_protection = c_helmet:GetDefHitTypeProtection(hit_type) * cond * adjuster or 0
			end
			
			helmet_hit_frac = ini_sys:r_float_ex(helmet:section(), "hit_fraction_actor") or 1
			helmet_bone_value = (1 - helmet_hit_frac) * cond or 0
        end
	end
	
	if elem == 0 then
		if headshot == 1 then
			armor_bone_value = 0
			armor_protection = 0
		else
			helmet_bone_value = 0
			helmet_protection = 0
		end
	else
		headshot = 0
		legs = 0
		arms = 0
	end
	
	-- Artefacts protection
	local artefacts_protection = 0
	local artefacts_ap_res = 0
	actor:iterate_belt( function(owner, obj)
		local sec = obj:section()
		local cond = obj:condition()
		
		af_bone_value = 0
		prot = 0
		
		if sec == "af_kevlar" then
			af_bone_value = 0.00
		end
		if sec == "af_kevlar_up" then
			af_bone_value = 0.01
		end
		if sec == "af_plates" then
			af_bone_value = 0.02
		end
		if sec == "af_plates_up" then
			af_bone_value = 0.03
		end
		
		local immunities_sec = SYS_GetParam(0, sec, "hit_absorbation_sect", sec)
		local prot = SYS_GetParam(2, immunities_sec, immunity , 0) * cond
		
		if headshot == 1 then
			if sec == "af_kevlar" or sec == "af_kevlar_up" or sec == "af_plates" or sec == "af_plates_up" then
				prot = 0
				af_bone_value = 0
			end
		end
		
		if settings.vulnerable and arms == 1 then
			if sec == "af_kevlar" or sec == "af_kevlar_up" or sec == "af_plates" or sec == "af_plates_up" then
				prot = prot * 0.5
				af_bone_value = af_bone_value * 0.5
			end
		end
		
		if settings.vulnerable and legs == 1 then
			if sec == "af_kevlar" or sec == "af_kevlar_up" or sec == "af_plates" or sec == "af_plates_up" then
				prot = 0
				af_bone_value = 0
			end
		end
		
		artefacts_protection = artefacts_protection + prot
		artefacts_ap_res = artefacts_ap_res + af_bone_value
	end)
	artefacts_protection = artefacts_protection * 0.6 -- scale to the displayed inventory values more or less
	artefacts_protection = artefacts_protection * arti
	
	-- Booster protection
	local booster_protection = 0
	db.actor:cast_Actor():conditions():BoosterForEach( function(booster_type, booster_time, booster_value)
		if booster_type == booster_type_def then
			booster_protection = booster_value
		end
	end)
	
	if protection == "Radiation" then
		booster_protection = booster_protection * 20.0
	end
	
	trace('%s + %s + %s + %s', helmet_protection, armor_protection, artefacts_protection, booster_protection)
	
	-- Special case if ammo do not penetrate armor
	no_pen = 0 
	if shit.type == hit.fire_wound then
		if headshot == 1 then
			trace('ammo pen = %s', k_ap)	
			trace('armor class = %s', helmet_bone_value)
			if k_ap < helmet_bone_value then
				helmet_protection = helmet_protection * 0.2 + helmet_bone_value * 1.3
				trace("ammo didn't penetrate armor, damage reduction applied")
				no_pen = 1
			end
		else
			trace('ammo pen = %s', k_ap)	
			trace('armor class = %s', armor_bone_value)
			trace('plates armor class = %s', artefacts_ap_res)
			armor_bone_value = armor_bone_value + artefacts_ap_res
			trace('total armor class = %s', armor_bone_value)
			if k_ap < armor_bone_value then
				armor_protection = armor_protection * 0.2 + armor_bone_value * 1.3
				trace("ammo didn't penetrate armor, damage reduction applied")
				no_pen = 1
			end
		end
	end
	
	fall_damage = 0
	if (shit.type == hit.strike) and (shit.draftsman:id() == db.actor:id()) then
		-- AFAIK, the *only* way to deal strike damage to yourself is through falling.
		-- So, get better, don't trip.
		helmet_protection = 0
		armor_protection = 0
		fall_damage = 1
	end
	
	total_prot = (helmet_protection + armor_protection + artefacts_protection + booster_protection)
	
	if zone_field == 1 then
		total_prot = total_prot * 2.5
	end
	
	total_prot = math.min(total_prot, limiter and limiter or 1.00)
	
end

function shit_booster(shit, bone_id, k_ap)
	trace('You got hit! >> dmg: %s // type: %s // %s', shit.power, shit.type, shit.draftsman:name())
	get_protection(shit, bone_id and bone_id or "bip01_spine", k_ap and k_ap or 0)
	
	trace('shit.power = %s // total_prot = %s', shit.power, (1 - total_prot))
	damage = (shit.power * scale) * (1 - total_prot)
	
	degrade_math = (damage * (0.07 * (1.0 + absorbe))) * settings.armor_dur_ac
	degrade_math = degrade_math / (1.0 - math.min(bonus_durability, 0.99))
	
	if fall_damage == 1 then
		degrade_math = 0
	end
	
	if shit.type == hit.telepatic or shit.type == hit.radiation then
		degrade_math = 0
	end
	
	if zone_dot == 1 then
		degrade_math = degrade_math / 1.0
		bleed = 0
	end
	
	if zone_field == 1 then
		damage = damage / 2.0
		degrade_math = degrade_math / 2.0
		bleed = 0
	end
	
	if elem == 1 then
		degrade_math = degrade_math / 2.0
	end
	
	if headshot == 1 or elem == 1 then
		helmet = db.actor:item_in_slot(12)
        if helmet then
		    cond = helmet:condition()
		    helmet:set_condition(cond - degrade_math)
		end
	end
	
	if headshot == 0 or elem == 1 then
		armor = db.actor:item_in_slot(7)
        if armor then
		    cond = armor:condition()
			if settings.vulnerable then 
				if (hitboxes[bone_id] == "leftleg") or (hitboxes[bone_id] == "rightleg") then
					degrade_math = degrade_math * 0.85
				end
				if (hitboxes[bone_id] == "leftarm") or (hitboxes[bone_id] == "rightarm") then
					degrade_math = degrade_math * 0.95
				end
			end
		    armor:set_condition(cond - degrade_math)
        end
	end
	
	shit.power = 0
	
	health_gating_flag = health_gating_active or (db.actor.health >= settings.health_gate_hp)
	
	if health_gating_flag then
		if not health_gating_active then
			health_gating_flag = true
			health_gating_active = true
			health_gating_tg = time_global()
			RegisterScriptCallback("actor_on_update", keep_alive)
		end
	end
	
	if shit.type ~= hit.radiation then
		if not health_gating_active then
			db.actor:set_health_ex(db.actor.health - damage)
		else
			db.actor:set_health_ex(math.max( (db.actor.health - damage), 0.15))
		end
	else
		db.actor:change_radiation(damage)
	end
	
	trace('final damage: %s // armor degr: %s', damage, degrade_math)
	
	damage = damage * bleed
	
	if zone_dot == 0 then
		if no_pen == 1 then
			db.actor:cast_Actor():conditions():AddWound(damage * settings.bleed_stop, hit_type, bone_id)
		else
			db.actor:cast_Actor():conditions():AddWound(damage * settings.bleed_pen, hit_type, bone_id)
		end
	end
end

PBA_func = perk_based_artefacts.actor_on_before_hit
function perk_based_artefacts.actor_on_before_hit(s_hit, bone_id, flags)
end

function actor_on_before_hit(shit, bone_id, flags)
	
	if not db.actor:alive() then
		shit.power = 0
		return
	end
	
	zone_dot = 0
	zone_field = 0
	shit.power = shit.power * settings.actor_hp
	
	--printf(shit.draftsman:name())
	
		gameplay = alife_storage_manager.get_state().diff_game
		if not (type(gameplay) == "table") then
			alife_storage_manager.get_state().diff_game = {}
			alife_storage_manager.get_state().diff_game["type"] = game_num
			gameplay = alife_storage_manager.get_state().diff_game
		end
		game_num = gameplay["type"] or game_num
		
		shit.power = shit.power * difficulty_multiplier[game_num]
	
	if shit.draftsman and shit.draftsman:has_info("npcx_is_companion") then
		flags.ret_value = false
		return
	end
	
	PBA_func(shit, bone_id, flags)
	
	wepl(shit, bone_id, flags)
	
	if (shit.type == hit.fire_wound) then
		wpn = level.object_by_id(shit.weapon_id)

		if wpn == nil then return end

		local sec = wpn:section()
		local wpn_id = wpn:id()

		local ammo_type_number = wpn:get_ammo_type()
		local ammo_list = utils_item.get_ammo(sec, wpn_id)
		local ammo_section = ammo_list[ammo_type_number+1]

		if ammo_section == nil then return end
	
		if (string.find(ammo_section, "buck")) then
			trace("/// Reducing buckshots damage")
			shit.power = shit.power / 3
		end

	    if (string.find(ammo_section, "23x75")) then
			trace("/// Reducing KS23 damage")
			shit.power = shit.power / 5
		end
		
		if (string.find(ammo_section, "dart")) then
			trace("/// Reducing AP Slugs damage")
			shit.power = shit.power / 2
		end
		
		if (string.find(ammo_section, "zhekan")) then
			trace("/// Reducing Slugs damage")
			shit.power = shit.power / 2
		end
		
		if (string.find(ammo_section, "pkm")) then
			trace("/// Reducing PKM damage")
			shit.power = shit.power / 4
		end

		k_ap = ini_sys:r_float_ex(ammo_section, "k_ap") or 0
		
		trace('Weapon: %s // Ammo: %s', sec, ammo_section)
		
		buckshot = ini_sys:r_float_ex(ammo_section, "buck_shot") or 1
		if buckshot > 1 then
			old_power = shit.power
			shit.power = shit.power * buckshot
			trace('Buckshot (%s // x%s) >> shit.power = %s', ammo_section, buckshot, shit.power)
		end
		
		if hit_last[shit.draftsman:id()] then
			if time_global() - hit_last[shit.draftsman:id()] >= (1000/120) * 1 then
				shit_booster(shit, bone_id, k_ap)
				hit_last[shit.draftsman:id()] = time_global()
			else
				trace('Last hit from %s was less than 1 frame ago! Skipping', shit.draftsman:id())
			end
		else
			shit_booster(shit, bone_id, k_ap)
			hit_last[shit.draftsman:id()] = time_global()
		end
		
		if old_power then
			shit.power = old_power
		end
		
		return
		
	end
	
	if (shit.type ~= hit.radiation) and (shit.type ~= hit.telepatic) then
		
		if string.find(shit.draftsman:name(), "zone_mine") and shit.power <= 0.05 then
			
			zone_dot = 1
			--shit.power = shit.power * 1.5
			
			if zone_last[shit.draftsman:id()] then
				if time_global() - zone_last[shit.draftsman:id()] >= 250 then
					shit_booster(shit, bone_id)
					zone_last[shit.draftsman:id()] = time_global()
				end
			else
				shit_booster(shit, bone_id)
				zone_last[shit.draftsman:id()] = time_global()
			end
			
			return
		end
		
		if string.find(shit.draftsman:name(), "zone_field") then
			zone_field = 1
			--shit.power = shit.power / 2.0
			shit_booster(shit, bone_id)
			return
		end
		
		shit_booster(shit, bone_id)
		return
	end
	
	if shit.type == hit.radiation then
		if shit.draftsman:id() == db.actor:id() then
			shit.power = shit.power * 10
		end
		shit_booster(shit, bone_id)
		shit.power = 0
		return
	end
end

function clear_invuls()
	zone_last = {}
	hit_last = {}
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", load_settings)
	RegisterScriptCallback("actor_on_before_hit", actor_on_before_hit)
	RegisterScriptCallback("on_option_change", load_settings)
	RegisterScriptCallback("actor_on_first_update", clear_invuls)
	RegisterScriptCallback("on_level_changing", clear_invuls)
end

--[[

	--[[function(owner, obj)
		local sec = obj:section()
		local cond = obj:condition()
		
		af_bone_value = 0
		prot = 0
		
		if sec == "af_kevlar" then
			af_bone_value = 0.00
		end
		if sec == "af_kevlar_up" then
			af_bone_value = 0.01
		end
		if sec == "af_plates" then
			af_bone_value = 0.02
		end
		if sec == "af_plates_up" then
			af_bone_value = 0.03
		end
		
		local immunities_sec = SYS_GetParam(0, sec, "hit_absorbation_sect", sec)
		local prot = SYS_GetParam(2, immunities_sec, immunity , 0) * cond

		printf('- af: %s // cond: %s', sec, cond)
		printf('- imm: %s // check: %s // prot: %s', immunities_sec, immunity, prot)
		
		if headshot == 1 then
			if sec == "af_kevlar" or sec == "af_kevlar_up" or sec == "af_plates" or sec == "af_plates_up" then
				prot = 0
				af_bone_value = 0
			end
		end
		
		if settings.vulnerable and arms == 1 then
			if sec == "af_kevlar" or sec == "af_kevlar_up" or sec == "af_plates" or sec == "af_plates_up" then
				prot = prot * 0.5
				af_bone_value = af_bone_value * 0.5
			end
		end
		
		if settings.vulnerable and legs == 1 then
			if sec == "af_kevlar" or sec == "af_kevlar_up" or sec == "af_plates" or sec == "af_plates_up" then
				prot = 0
				af_bone_value = 0
			end
		end
		
		artefacts_protection = artefacts_protection + prot
		artefacts_ap_res = artefacts_ap_res + af_bone_value
	end--]]

--]]